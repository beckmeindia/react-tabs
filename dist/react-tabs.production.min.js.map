{"version":3,"file":"react-tabs.production.min.js","sources":["../src/helpers/elementTypes.js","../src/helpers/childrenDeepMap.js","../src/components/UncontrolledTabs.js","../node_modules/classnames/index.js","../src/helpers/uuid.js","../src/helpers/count.js","../src/components/Tabs.js","../src/components/TabList.js","../src/components/Tab.js","../src/components/TabPanel.js"],"sourcesContent":["function makeTypeChecker(tabsRole) {\r\n  return element => !!element.type && element.type.tabsRole === tabsRole;\r\n}\r\n\r\nexport const isTab = makeTypeChecker('Tab');\r\nexport const isTabList = makeTypeChecker('TabList');\r\nexport const isTabPanel = makeTypeChecker('TabPanel');\r\n","import { Children, cloneElement } from 'react';\r\nimport { isTabPanel, isTab, isTabList } from './elementTypes';\r\n\r\nfunction isTabChild(child) {\r\n  return isTab(child) || isTabList(child) || isTabPanel(child);\r\n}\r\n\r\nexport function deepMap(children, callback) {\r\n  return Children.map(children, child => {\r\n    // null happens when conditionally rendering TabPanel/Tab\r\n    // see https://github.com/reactjs/react-tabs/issues/37\r\n    if (child === null) return null;\r\n\r\n    if (isTabChild(child)) {\r\n      return callback(child);\r\n    }\r\n\r\n    if (\r\n      child.props &&\r\n      child.props.children &&\r\n      typeof child.props.children === 'object'\r\n    ) {\r\n      // Clone the child that has children and map them too\r\n      return cloneElement(child, {\r\n        ...child.props,\r\n        children: deepMap(child.props.children, callback),\r\n      });\r\n    }\r\n\r\n    return child;\r\n  });\r\n}\r\n\r\nexport function deepForEach(children, callback) {\r\n  return Children.forEach(children, child => {\r\n    // null happens when conditionally rendering TabPanel/Tab\r\n    // see https://github.com/reactjs/react-tabs/issues/37\r\n    if (child === null) return;\r\n\r\n    if (isTab(child) || isTabPanel(child)) {\r\n      callback(child);\r\n    } else if (\r\n      child.props &&\r\n      child.props.children &&\r\n      typeof child.props.children === 'object'\r\n    ) {\r\n      if (isTabList(child)) callback(child);\r\n      deepForEach(child.props.children, callback);\r\n    }\r\n  });\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport React, { cloneElement, Component } from 'react';\r\nimport cx from 'classnames';\r\nimport uuid from '../helpers/uuid';\r\nimport { childrenPropType } from '../helpers/propTypes';\r\nimport { getPanelsCount, getTabsCount } from '../helpers/count';\r\nimport { deepMap } from '../helpers/childrenDeepMap';\r\nimport { isTabList, isTabPanel, isTab } from '../helpers/elementTypes';\r\n\r\nfunction isNode(node) {\r\n  return node && 'getAttribute' in node;\r\n}\r\n\r\n// Determine if a node from event.target is a Tab element\r\nfunction isTabNode(node) {\r\n  return isNode(node) && node.getAttribute('role') === 'tab';\r\n}\r\n\r\n// Determine if a tab node is disabled\r\nfunction isTabDisabled(node) {\r\n  return isNode(node) && node.getAttribute('aria-disabled') === 'true';\r\n}\r\n\r\nlet canUseActiveElement;\r\ntry {\r\n  canUseActiveElement = !!(\r\n    typeof window !== 'undefined' &&\r\n    window.document &&\r\n    window.document.activeElement\r\n  );\r\n} catch (e) {\r\n  // Work around for IE bug when accessing document.activeElement in an iframe\r\n  // Refer to the following resources:\r\n  // http://stackoverflow.com/a/10982960/369687\r\n  // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12733599\r\n  canUseActiveElement = false;\r\n}\r\nexport default class UncontrolledTabs extends Component {\r\n  static defaultProps = {\r\n    className: 'react-tabs',\r\n    focus: false,\r\n  };\r\n\r\n  static propTypes = {\r\n    children: childrenPropType,\r\n    className: PropTypes.oneOfType([\r\n      PropTypes.string,\r\n      PropTypes.array,\r\n      PropTypes.object,\r\n    ]),\r\n    disabledTabClassName: PropTypes.string,\r\n    domRef: PropTypes.func,\r\n    focus: PropTypes.bool,\r\n    forceRenderTabPanel: PropTypes.bool,\r\n    onSelect: PropTypes.func.isRequired,\r\n    selectedIndex: PropTypes.number.isRequired,\r\n    selectedTabClassName: PropTypes.string,\r\n    selectedTabPanelClassName: PropTypes.string,\r\n  };\r\n\r\n  tabNodes = [];\r\n\r\n  setSelected(index, event) {\r\n    // Check index boundary\r\n    if (index < 0 || index >= this.getTabsCount()) return;\r\n\r\n    const { onSelect, selectedIndex } = this.props;\r\n\r\n    // Call change event handler\r\n    onSelect(index, selectedIndex, event);\r\n  }\r\n\r\n  getNextTab(index) {\r\n    const count = this.getTabsCount();\r\n\r\n    // Look for non-disabled tab from index to the last tab on the right\r\n    for (let i = index + 1; i < count; i++) {\r\n      if (!isTabDisabled(this.getTab(i))) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    // If no tab found, continue searching from first on left to index\r\n    for (let i = 0; i < index; i++) {\r\n      if (!isTabDisabled(this.getTab(i))) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    // No tabs are disabled, return index\r\n    return index;\r\n  }\r\n\r\n  getPrevTab(index) {\r\n    let i = index;\r\n\r\n    // Look for non-disabled tab from index to first tab on the left\r\n    while (i--) {\r\n      if (!isTabDisabled(this.getTab(i))) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    // If no tab found, continue searching from last tab on right to index\r\n    i = this.getTabsCount();\r\n    while (i-- > index) {\r\n      if (!isTabDisabled(this.getTab(i))) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    // No tabs are disabled, return index\r\n    return index;\r\n  }\r\n\r\n  getFirstTab() {\r\n    const count = this.getTabsCount();\r\n\r\n    // Look for non disabled tab from the first tab\r\n    for (let i = 0; i < count; i++) {\r\n      if (!isTabDisabled(this.getTab(i))) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  getLastTab() {\r\n    let i = this.getTabsCount();\r\n\r\n    // Look for non disabled tab from the last tab\r\n    while (i--) {\r\n      if (!isTabDisabled(this.getTab(i))) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  getTabsCount() {\r\n    const { children } = this.props;\r\n    return getTabsCount(children);\r\n  }\r\n\r\n  getPanelsCount() {\r\n    const { children } = this.props;\r\n    return getPanelsCount(children);\r\n  }\r\n\r\n  getTab(index) {\r\n    return this.tabNodes[`tabs-${index}`];\r\n  }\r\n\r\n  getChildren() {\r\n    let index = 0;\r\n    const {\r\n      children,\r\n      disabledTabClassName,\r\n      focus,\r\n      forceRenderTabPanel,\r\n      selectedIndex,\r\n      selectedTabClassName,\r\n      selectedTabPanelClassName,\r\n    } = this.props;\r\n\r\n    this.tabIds = this.tabIds || [];\r\n    this.panelIds = this.panelIds || [];\r\n    let diff = this.tabIds.length - this.getTabsCount();\r\n\r\n    // Add ids if new tabs have been added\r\n    // Don't bother removing ids, just keep them in case they are added again\r\n    // This is more efficient, and keeps the uuid counter under control\r\n    while (diff++ < 0) {\r\n      this.tabIds.push(uuid());\r\n      this.panelIds.push(uuid());\r\n    }\r\n\r\n    // Map children to dynamically setup refs\r\n    return deepMap(children, child => {\r\n      let result = child;\r\n\r\n      // Clone TabList and Tab components to have refs\r\n      if (isTabList(child)) {\r\n        let listIndex = 0;\r\n\r\n        // Figure out if the current focus in the DOM is set on a Tab\r\n        // If it is we should keep the focus on the next selected tab\r\n        let wasTabFocused = false;\r\n\r\n        if (canUseActiveElement) {\r\n          wasTabFocused = React.Children.toArray(child.props.children)\r\n            .filter(isTab)\r\n            .some((tab, i) => document.activeElement === this.getTab(i));\r\n        }\r\n\r\n        result = cloneElement(child, {\r\n          children: deepMap(child.props.children, tab => {\r\n            const key = `tabs-${listIndex}`;\r\n            const selected = selectedIndex === listIndex;\r\n\r\n            const props = {\r\n              tabRef: node => {\r\n                this.tabNodes[key] = node;\r\n              },\r\n              id: this.tabIds[listIndex],\r\n              panelId: this.panelIds[listIndex],\r\n              selected,\r\n              focus: selected && (focus || wasTabFocused),\r\n            };\r\n\r\n            if (selectedTabClassName)\r\n              props.selectedClassName = selectedTabClassName;\r\n            if (disabledTabClassName)\r\n              props.disabledClassName = disabledTabClassName;\r\n\r\n            listIndex++;\r\n\r\n            return cloneElement(tab, props);\r\n          }),\r\n        });\r\n      } else if (isTabPanel(child)) {\r\n        const props = {\r\n          id: this.panelIds[index],\r\n          tabId: this.tabIds[index],\r\n          selected: selectedIndex === index,\r\n        };\r\n\r\n        if (forceRenderTabPanel) props.forceRender = forceRenderTabPanel;\r\n        if (selectedTabPanelClassName)\r\n          props.selectedClassName = selectedTabPanelClassName;\r\n\r\n        index++;\r\n\r\n        result = cloneElement(child, props);\r\n      }\r\n\r\n      return result;\r\n    });\r\n  }\r\n\r\n  handleKeyDown = e => {\r\n    if (this.isTabFromContainer(e.target)) {\r\n      let { selectedIndex: index } = this.props;\r\n      let preventDefault = false;\r\n      let useSelectedIndex = false;\r\n\r\n      if (e.keyCode === 32 || e.keyCode === 13) {\r\n        preventDefault = true;\r\n        useSelectedIndex = false;\r\n        this.handleClick(e);\r\n      }\r\n\r\n      if (e.keyCode === 37 || e.keyCode === 38) {\r\n        // Select next tab to the left\r\n        index = this.getPrevTab(index);\r\n        preventDefault = true;\r\n        useSelectedIndex = true;\r\n      } else if (e.keyCode === 39 || e.keyCode === 40) {\r\n        // Select next tab to the right\r\n        index = this.getNextTab(index);\r\n        preventDefault = true;\r\n        useSelectedIndex = true;\r\n      } else if (e.keyCode === 35) {\r\n        // Select last tab (End key)\r\n        index = this.getLastTab();\r\n        preventDefault = true;\r\n        useSelectedIndex = true;\r\n      } else if (e.keyCode === 36) {\r\n        // Select first tab (Home key)\r\n        index = this.getFirstTab();\r\n        preventDefault = true;\r\n        useSelectedIndex = true;\r\n      }\r\n\r\n      // This prevents scrollbars from moving around\r\n      if (preventDefault) {\r\n        e.preventDefault();\r\n      }\r\n\r\n      // Only use the selected index in the state if we're not using the tabbed index\r\n      if (useSelectedIndex) {\r\n        this.setSelected(index, e);\r\n      }\r\n    }\r\n  };\r\n\r\n  handleClick = e => {\r\n    let node = e.target;\r\n    // eslint-disable-next-line no-cond-assign\r\n    do {\r\n      if (this.isTabFromContainer(node)) {\r\n        if (isTabDisabled(node)) {\r\n          return;\r\n        }\r\n\r\n        const index = [].slice\r\n          .call(node.parentNode.children)\r\n          .filter(isTabNode)\r\n          .indexOf(node);\r\n        this.setSelected(index, e);\r\n        return;\r\n      }\r\n    } while ((node = node.parentNode) != null);\r\n  };\r\n\r\n  /**\r\n   * Determine if a node from event.target is a Tab element for the current Tabs container.\r\n   * If the clicked element is not a Tab, it returns false.\r\n   * If it finds another Tabs container between the Tab and `this`, it returns false.\r\n   */\r\n  isTabFromContainer(node) {\r\n    // return immediately if the clicked element is not a Tab.\r\n    if (!isTabNode(node)) {\r\n      return false;\r\n    }\r\n\r\n    // Check if the first occurrence of a Tabs container is `this` one.\r\n    let nodeAncestor = node.parentElement;\r\n    do {\r\n      if (nodeAncestor === this.node) return true;\r\n      if (nodeAncestor.getAttribute('data-tabs')) break;\r\n\r\n      nodeAncestor = nodeAncestor.parentElement;\r\n    } while (nodeAncestor);\r\n\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    // Delete all known props, so they don't get added to DOM\r\n    const {\r\n      children, // unused\r\n      className,\r\n      disabledTabClassName, // unused\r\n      domRef,\r\n      focus, // unused\r\n      forceRenderTabPanel, // unused\r\n      onSelect, // unused\r\n      selectedIndex, // unused\r\n      selectedTabClassName, // unused\r\n      selectedTabPanelClassName, // unused\r\n      ...attributes\r\n    } = this.props;\r\n\r\n    return (\r\n      <div\r\n        {...attributes}\r\n        className={cx(className)}\r\n        onClick={this.handleClick}\r\n        onKeyDown={this.handleKeyDown}\r\n        ref={node => {\r\n          this.node = node;\r\n          if (domRef) domRef(node);\r\n        }}\r\n        data-tabs\r\n      >\r\n        {this.getChildren()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","// Get a universally unique identifier\r\nlet count = 0;\r\nexport default function uuid() {\r\n  return `react-tabs-${count++}`;\r\n}\r\n\r\nexport function reset() {\r\n  count = 0;\r\n}\r\n","import { deepForEach } from './childrenDeepMap';\r\nimport { isTab, isTabPanel } from './elementTypes';\r\n\r\nexport function getTabsCount(children) {\r\n  let tabCount = 0;\r\n  deepForEach(children, child => {\r\n    if (isTab(child)) tabCount++;\r\n  });\r\n\r\n  return tabCount;\r\n}\r\n\r\nexport function getPanelsCount(children) {\r\n  let panelCount = 0;\r\n  deepForEach(children, child => {\r\n    if (isTabPanel(child)) panelCount++;\r\n  });\r\n\r\n  return panelCount;\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport {\r\n  childrenPropType,\r\n  onSelectPropType,\r\n  selectedIndexPropType,\r\n} from '../helpers/propTypes';\r\nimport UncontrolledTabs from './UncontrolledTabs';\r\nimport { getTabsCount } from '../helpers/count';\r\n\r\nconst MODE_CONTROLLED = 0;\r\nconst MODE_UNCONTROLLED = 1;\r\n\r\nexport default class Tabs extends Component {\r\n  static defaultProps = {\r\n    defaultFocus: false,\r\n    forceRenderTabPanel: false,\r\n    selectedIndex: null,\r\n    defaultIndex: null,\r\n  };\r\n\r\n  static propTypes = {\r\n    children: childrenPropType,\r\n    className: PropTypes.oneOfType([\r\n      PropTypes.string,\r\n      PropTypes.array,\r\n      PropTypes.object,\r\n    ]),\r\n    defaultFocus: PropTypes.bool,\r\n    defaultIndex: PropTypes.number,\r\n    disabledTabClassName: PropTypes.string,\r\n    domRef: PropTypes.func,\r\n    forceRenderTabPanel: PropTypes.bool,\r\n    onSelect: onSelectPropType,\r\n    selectedIndex: selectedIndexPropType,\r\n    selectedTabClassName: PropTypes.string,\r\n    selectedTabPanelClassName: PropTypes.string,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = Tabs.copyPropsToState(this.props, {}, props.defaultFocus);\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    return Tabs.copyPropsToState(props, state);\r\n  }\r\n\r\n  static getModeFromProps(props) {\r\n    return props.selectedIndex === null ? MODE_UNCONTROLLED : MODE_CONTROLLED;\r\n  }\r\n\r\n  handleSelected = (index, last, event) => {\r\n    const { onSelect } = this.props;\r\n    const { mode } = this.state;\r\n\r\n    // Call change event handler\r\n    if (typeof onSelect === 'function') {\r\n      // Check if the change event handler cancels the tab change\r\n      if (onSelect(index, last, event) === false) return;\r\n    }\r\n\r\n    const state = {\r\n      // Set focus if the change was triggered from the keyboard\r\n      focus: event.type === 'keydown',\r\n    };\r\n\r\n    if (mode === MODE_UNCONTROLLED) {\r\n      // Update selected index\r\n      state.selectedIndex = index;\r\n    }\r\n\r\n    this.setState(state);\r\n  };\r\n\r\n  // preserve the existing selectedIndex from state.\r\n  // If the state has not selectedIndex, default to the defaultIndex or 0\r\n  static copyPropsToState(props, state, focus = false) {\r\n    if (\r\n      process.env.NODE_ENV !== 'production' &&\r\n      state.mode !== undefined &&\r\n      state.mode !== Tabs.getModeFromProps(props)\r\n    ) {\r\n      throw new Error(\r\n        `Switching between controlled mode (by using \\`selectedIndex\\`) and uncontrolled mode is not supported in \\`Tabs\\`.\r\nFor more information about controlled and uncontrolled mode of react-tabs see the README.`,\r\n      );\r\n    }\r\n\r\n    const newState = {\r\n      focus,\r\n      mode: Tabs.getModeFromProps(props),\r\n    };\r\n\r\n    if (newState.mode === MODE_UNCONTROLLED) {\r\n      const maxTabIndex = getTabsCount(props.children) - 1;\r\n      let selectedIndex = null;\r\n\r\n      if (state.selectedIndex != null) {\r\n        selectedIndex = Math.min(state.selectedIndex, maxTabIndex);\r\n      } else {\r\n        selectedIndex = props.defaultIndex || 0;\r\n      }\r\n      newState.selectedIndex = selectedIndex;\r\n    }\r\n\r\n    return newState;\r\n  }\r\n\r\n  render() {\r\n    const { children, defaultIndex, defaultFocus, ...props } = this.props;\r\n    const { focus, selectedIndex } = this.state;\r\n\r\n    props.focus = focus;\r\n    props.onSelect = this.handleSelected;\r\n\r\n    if (selectedIndex != null) {\r\n      props.selectedIndex = selectedIndex;\r\n    }\r\n\r\n    return <UncontrolledTabs {...props}>{children}</UncontrolledTabs>;\r\n  }\r\n}\r\n\r\nTabs.tabsRole = 'Tabs';\r\n","import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport cx from 'classnames';\r\n\r\nexport default class TabList extends Component {\r\n  static defaultProps = {\r\n    className: 'react-tabs__tab-list',\r\n  };\r\n\r\n  static propTypes = {\r\n    children: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\r\n    className: PropTypes.oneOfType([\r\n      PropTypes.string,\r\n      PropTypes.array,\r\n      PropTypes.object,\r\n    ]),\r\n  };\r\n\r\n  render() {\r\n    const { children, className, ...attributes } = this.props;\r\n\r\n    return (\r\n      <ul {...attributes} className={cx(className)} role=\"tablist\">\r\n        {children}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nTabList.tabsRole = 'TabList';\r\n","import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport cx from 'classnames';\r\n\r\nconst DEFAULT_CLASS = 'react-tabs__tab';\r\n\r\nexport default class Tab extends Component {\r\n  static defaultProps = {\r\n    className: DEFAULT_CLASS,\r\n    disabledClassName: `${DEFAULT_CLASS}--disabled`,\r\n    focus: false,\r\n    id: null,\r\n    panelId: null,\r\n    selected: false,\r\n    selectedClassName: `${DEFAULT_CLASS}--selected`,\r\n  };\r\n\r\n  static propTypes = {\r\n    children: PropTypes.oneOfType([\r\n      PropTypes.array,\r\n      PropTypes.object,\r\n      PropTypes.string,\r\n    ]),\r\n    className: PropTypes.oneOfType([\r\n      PropTypes.string,\r\n      PropTypes.array,\r\n      PropTypes.object,\r\n    ]),\r\n    disabled: PropTypes.bool,\r\n    tabIndex: PropTypes.string,\r\n    disabledClassName: PropTypes.string,\r\n    focus: PropTypes.bool, // private\r\n    id: PropTypes.string, // private\r\n    panelId: PropTypes.string, // private\r\n    selected: PropTypes.bool, // private\r\n    selectedClassName: PropTypes.string,\r\n    tabRef: PropTypes.func, // private\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.checkFocus();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.checkFocus();\r\n  }\r\n\r\n  checkFocus() {\r\n    const { selected, focus } = this.props;\r\n    if (selected && focus) {\r\n      this.node.focus();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      children,\r\n      className,\r\n      disabled,\r\n      disabledClassName,\r\n      focus, // unused\r\n      id,\r\n      panelId,\r\n      selected,\r\n      selectedClassName,\r\n      tabIndex,\r\n      tabRef,\r\n      ...attributes\r\n    } = this.props;\r\n\r\n    return (\r\n      <li\r\n        {...attributes}\r\n        className={cx(className, {\r\n          [selectedClassName]: selected,\r\n          [disabledClassName]: disabled,\r\n        })}\r\n        ref={node => {\r\n          this.node = node;\r\n          if (tabRef) tabRef(node);\r\n        }}\r\n        role=\"tab\"\r\n        id={id}\r\n        aria-selected={selected ? 'true' : 'false'}\r\n        aria-disabled={disabled ? 'true' : 'false'}\r\n        aria-controls={panelId}\r\n        tabIndex={tabIndex || (selected ? '0' : null)}\r\n      >\r\n        {children}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nTab.tabsRole = 'Tab';\r\n","import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport cx from 'classnames';\r\n\r\nconst DEFAULT_CLASS = 'react-tabs__tab-panel';\r\n\r\nexport default class TabPanel extends Component {\r\n  static defaultProps = {\r\n    className: DEFAULT_CLASS,\r\n    forceRender: false,\r\n    selectedClassName: `${DEFAULT_CLASS}--selected`,\r\n  };\r\n\r\n  static propTypes = {\r\n    children: PropTypes.node,\r\n    className: PropTypes.oneOfType([\r\n      PropTypes.string,\r\n      PropTypes.array,\r\n      PropTypes.object,\r\n    ]),\r\n    forceRender: PropTypes.bool,\r\n    id: PropTypes.string, // private\r\n    selected: PropTypes.bool, // private\r\n    selectedClassName: PropTypes.string,\r\n    tabId: PropTypes.string, // private\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      children,\r\n      className,\r\n      forceRender,\r\n      id,\r\n      selected,\r\n      selectedClassName,\r\n      tabId,\r\n      ...attributes\r\n    } = this.props;\r\n\r\n    return (\r\n      <div\r\n        {...attributes}\r\n        className={cx(className, {\r\n          [selectedClassName]: selected,\r\n        })}\r\n        role=\"tabpanel\"\r\n        id={id}\r\n        aria-labelledby={tabId}\r\n      >\r\n        {forceRender || selected ? children : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTabPanel.tabsRole = 'TabPanel';\r\n"],"names":["makeTypeChecker","tabsRole","element","type","isTab","isTabList","isTabPanel","deepMap","children","callback","Children","map","child","isTabChild","props","cloneElement","deepForEach","forEach","canUseActiveElement","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","key","hasOwn","call","join","hasOwnProperty","module","exports","default","window","count","uuid","getTabsCount","tabCount","isNode","node","isTabNode","getAttribute","isTabDisabled","document","activeElement","e","UncontrolledTabs","tabNodes","handleKeyDown","_this","isTabFromContainer","target","index","selectedIndex","preventDefault","useSelectedIndex","keyCode","handleClick","getPrevTab","getNextTab","getLastTab","getFirstTab","setSelected","slice","parentNode","filter","indexOf","event","this","onSelect","getTab","getPanelsCount","panelCount","getChildren","disabledTabClassName","focus","forceRenderTabPanel","selectedTabClassName","selectedTabPanelClassName","tabIds","panelIds","diff","result","listIndex","wasTabFocused","React","toArray","some","tab","_this2","selected","tabRef","id","panelId","selectedClassName","disabledClassName","tabId","forceRender","nodeAncestor","parentElement","render","className","domRef","attributes","cx","onClick","onKeyDown","ref","_this3","Component","defaultProps","Tabs","handleSelected","last","mode","state","setState","copyPropsToState","defaultFocus","getDerivedStateFromProps","getModeFromProps","newState","maxTabIndex","Math","min","defaultIndex","TabList","role","DEFAULT_CLASS","Tab","componentDidMount","checkFocus","componentDidUpdate","disabled","tabIndex","TabPanel"],"mappings":"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"}